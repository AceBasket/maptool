/*
 * This software Copyright by the RPTools.net development team, and
 * licensed under the Affero GPL Version 3 or, at your option, any later
 * version.
 *
 * MapTool Source Code is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public
 * License * along with this source Code.  If not, please visit
 * <http://www.gnu.org/licenses/> and specifically the Affero license
 * text at <http://www.gnu.org/licenses/agpl.html>.
 */
package net.rptools.maptool.client.swing.colorpicker;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jeta.forms.components.colors.JETAColorWell;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ResourceBundle;
import javax.swing.*;

public class ColorPanelView {
  private JPanel mainPanel;

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    mainPanel = new JPanel();
    mainPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), 0, -1));
    panel1.setName("colorPanel");
    mainPanel.add(
        panel1,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell1 = new JETAColorWell();
    Font jETAColorWell1Font = UIManager.getFont("Panel.font");
    if (jETAColorWell1Font != null) jETAColorWell1.setFont(jETAColorWell1Font);
    jETAColorWell1.setName("foregroundColor");
    panel1.add(
        jETAColorWell1,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            new Dimension(30, 30),
            null,
            0,
            false));
    final JETAColorWell jETAColorWell2 = new JETAColorWell();
    Font jETAColorWell2Font = UIManager.getFont("Panel.font");
    if (jETAColorWell2Font != null) jETAColorWell2.setFont(jETAColorWell2Font);
    jETAColorWell2.setName("backgroundColor");
    panel1.add(
        jETAColorWell2,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            new Dimension(30, 30),
            null,
            0,
            false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), 0, 0));
    panel2.setName("recentColors");
    mainPanel.add(
        panel2,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell3 = new JETAColorWell();
    Font jETAColorWell3Font = UIManager.getFont("Panel.font");
    if (jETAColorWell3Font != null) jETAColorWell3.setFont(jETAColorWell3Font);
    jETAColorWell3.setName("recentColor4");
    panel2.add(
        jETAColorWell3,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell4 = new JETAColorWell();
    Font jETAColorWell4Font = UIManager.getFont("Panel.font");
    if (jETAColorWell4Font != null) jETAColorWell4.setFont(jETAColorWell4Font);
    jETAColorWell4.setName("recentColor0");
    panel2.add(
        jETAColorWell4,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell5 = new JETAColorWell();
    Font jETAColorWell5Font = UIManager.getFont("Panel.font");
    if (jETAColorWell5Font != null) jETAColorWell5.setFont(jETAColorWell5Font);
    jETAColorWell5.setName("recentColor1");
    panel2.add(
        jETAColorWell5,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell6 = new JETAColorWell();
    Font jETAColorWell6Font = UIManager.getFont("Panel.font");
    if (jETAColorWell6Font != null) jETAColorWell6.setFont(jETAColorWell6Font);
    jETAColorWell6.setName("recentColor5");
    panel2.add(
        jETAColorWell6,
        new GridConstraints(
            1,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell7 = new JETAColorWell();
    Font jETAColorWell7Font = UIManager.getFont("Panel.font");
    if (jETAColorWell7Font != null) jETAColorWell7.setFont(jETAColorWell7Font);
    jETAColorWell7.setName("recentColor2");
    panel2.add(
        jETAColorWell7,
        new GridConstraints(
            0,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell8 = new JETAColorWell();
    Font jETAColorWell8Font = UIManager.getFont("Panel.font");
    if (jETAColorWell8Font != null) jETAColorWell8.setFont(jETAColorWell8Font);
    jETAColorWell8.setName("recentColor3");
    panel2.add(
        jETAColorWell8,
        new GridConstraints(
            0,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell9 = new JETAColorWell();
    Font jETAColorWell9Font = UIManager.getFont("Panel.font");
    if (jETAColorWell9Font != null) jETAColorWell9.setFont(jETAColorWell9Font);
    jETAColorWell9.setName("recentColor7");
    panel2.add(
        jETAColorWell9,
        new GridConstraints(
            1,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell10 = new JETAColorWell();
    Font jETAColorWell10Font = UIManager.getFont("Panel.font");
    if (jETAColorWell10Font != null) jETAColorWell10.setFont(jETAColorWell10Font);
    jETAColorWell10.setName("recentColor6");
    panel2.add(
        jETAColorWell10,
        new GridConstraints(
            1,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell11 = new JETAColorWell();
    Font jETAColorWell11Font = UIManager.getFont("Panel.font");
    if (jETAColorWell11Font != null) jETAColorWell11.setFont(jETAColorWell11Font);
    jETAColorWell11.setName("recentColor8");
    panel2.add(
        jETAColorWell11,
        new GridConstraints(
            2,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell12 = new JETAColorWell();
    Font jETAColorWell12Font = UIManager.getFont("Panel.font");
    if (jETAColorWell12Font != null) jETAColorWell12.setFont(jETAColorWell12Font);
    jETAColorWell12.setName("recentColor9");
    panel2.add(
        jETAColorWell12,
        new GridConstraints(
            2,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell13 = new JETAColorWell();
    Font jETAColorWell13Font = UIManager.getFont("Panel.font");
    if (jETAColorWell13Font != null) jETAColorWell13.setFont(jETAColorWell13Font);
    jETAColorWell13.setName("recentColor15");
    panel2.add(
        jETAColorWell13,
        new GridConstraints(
            3,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell14 = new JETAColorWell();
    Font jETAColorWell14Font = UIManager.getFont("Panel.font");
    if (jETAColorWell14Font != null) jETAColorWell14.setFont(jETAColorWell14Font);
    jETAColorWell14.setName("recentColor10");
    panel2.add(
        jETAColorWell14,
        new GridConstraints(
            2,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell15 = new JETAColorWell();
    Font jETAColorWell15Font = UIManager.getFont("Panel.font");
    if (jETAColorWell15Font != null) jETAColorWell15.setFont(jETAColorWell15Font);
    jETAColorWell15.setName("recentColor11");
    panel2.add(
        jETAColorWell15,
        new GridConstraints(
            2,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell16 = new JETAColorWell();
    Font jETAColorWell16Font = UIManager.getFont("Panel.font");
    if (jETAColorWell16Font != null) jETAColorWell16.setFont(jETAColorWell16Font);
    jETAColorWell16.setName("recentColor12");
    panel2.add(
        jETAColorWell16,
        new GridConstraints(
            3,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell17 = new JETAColorWell();
    Font jETAColorWell17Font = UIManager.getFont("Panel.font");
    if (jETAColorWell17Font != null) jETAColorWell17.setFont(jETAColorWell17Font);
    jETAColorWell17.setName("recentColor13");
    panel2.add(
        jETAColorWell17,
        new GridConstraints(
            3,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JETAColorWell jETAColorWell18 = new JETAColorWell();
    Font jETAColorWell18Font = UIManager.getFont("Panel.font");
    if (jETAColorWell18Font != null) jETAColorWell18.setFont(jETAColorWell18Font);
    jETAColorWell18.setName("recentColor14");
    panel2.add(
        jETAColorWell18,
        new GridConstraints(
            3,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), 0, -1));
    mainPanel.add(
        panel3,
        new GridConstraints(
            2,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JToggleButton toggleButton1 = new JToggleButton();
    toggleButton1.setAlignmentY(0.0f);
    toggleButton1.setName("toggleSnapToGrid");
    toggleButton1.setText("");
    toggleButton1.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ColorPicker.tooltip.gridSnap"));
    panel3.add(
        toggleButton1,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JToggleButton toggleButton2 = new JToggleButton();
    toggleButton2.setName("toggleSquareCap");
    toggleButton2.setText("");
    toggleButton2.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ColorPicker.tooltip.lineType"));
    panel3.add(
        toggleButton2,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JToggleButton toggleButton3 = new JToggleButton();
    toggleButton3.setName("toggleErase");
    toggleButton3.setText("");
    toggleButton3.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ColorPicker.tooltip.eraser"));
    panel3.add(
        toggleButton3,
        new GridConstraints(
            0,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel4 = new JPanel();
    panel4.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), 0, -1));
    mainPanel.add(
        panel4,
        new GridConstraints(
            3,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label1 = new JLabel();
    label1.setName("penWidthLabel");
    label1.setText("");
    label1.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ColorPicker.tooltip.penWidth"));
    panel4.add(
        label1,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label2 = new JLabel();
    label2.setName("opacityLabel");
    label2.setText("");
    label2.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ColorPicker.tooltip.opacity"));
    panel4.add(
        label2,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JSpinner spinner1 = new JSpinner();
    spinner1.setName("opacity");
    panel4.add(
        spinner1,
        new GridConstraints(
            1,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JSpinner spinner2 = new JSpinner();
    spinner2.setName("penWidth");
    panel4.add(
        spinner2,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer1 = new Spacer();
    panel4.add(
        spacer1,
        new GridConstraints(
            2,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
  }

  private static Method $$$cachedGetBundleMethod$$$ = null;

  private String $$$getMessageFromBundle$$$(String path, String key) {
    ResourceBundle bundle;
    try {
      Class<?> thisClass = this.getClass();
      if ($$$cachedGetBundleMethod$$$ == null) {
        Class<?> dynamicBundleClass =
            thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
        $$$cachedGetBundleMethod$$$ =
            dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
      }
      bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
    } catch (Exception e) {
      bundle = ResourceBundle.getBundle(path);
    }
    return bundle.getString(key);
  }

  /** @noinspection ALL */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }
}
